agent A: b, c(u, p)
agent X: b, c(u, p)
agent T: k

complex(a: A, t: T, x: X){
	rule simpleBinding: 		t.k//0, a.b//0 <=> t.k+a.b 							@1.0, 1.0
	rule selfBind:				a.b//0, a.c//0 	<=> a.b+a.c							@1.0, 1.0
	rule cyclicBindings:		a//0, x//0		=> a.b+x.b, a.c+x.c 				@1.0
	observe cyclicBindingsTest: a.b+x.b, a.c+x.c 
}


rule stateChange(x: X): 				x.c(u)//0 		<=> x.c(p)//0 					@1.0, 1.0
rule stateChangeAndBind(x1: X, x2: X):	x1.c(u)//0, x2.c(p)//0 <=> x1.c(p)+x2.c(p) 		@1.0, 1.0

complex(a: A, x: X){
	rule synthesisDefault:			_ 		=> a//0 						@1.0
	rule synthesisCustomState:		_		=> a.c(p)//0					@1.0
	rule synthesisAndBind:			_		=> a.b+x.c						@1.0
	
	rule degradation: 				a//0	=> _ 							@1.0
	rule undefinedDegradation:		a		=> _							@1.0
	
	observe synthesisDefaultTest: 			a//0
	observe synthesisCustomStateTest: 		a.c(p)//0	
	observe synthesisAndBindTest: 			a.b+x.c	
}

complex(a: A, x: X, t: T){
	rule inRuleDegradation:			a.b+x.c, x.b//0			<=> x.b//0, x.c//0			@1.0, 1.0
	rule genericDegradation:		a.b+T.k 				 => a.b//0					@1.0
	rule wildcardSustain:			a.b+?, t.k//0, a.c//0	<=> a.b+?, a.c+t.k			@1.0, 1.0
	
	rule freeGenericBinding:		a.b+T.k					=> a.b//0					@1.0
	
	observe aWithFreeB: a.b//0
}


#rule wildcardSustain(a: A, t: T):	a.b+?, t.k//0	=> a.b+?, a.c+t.k					@1.0	#TODO: Forbid because of missing a.c//0
#rule wildcardSustain(a: A, t: T):	a.b+?, t.k//0	=> a.c+t.k							@1.0	#TODO: Forbid